SQL> 
SQL> PROMPT Activity simple bursting example
Activity simple bursting example
SQL> PROMPT ================================
================================
SQL> @..\sql\Setup_Bur
DROP TABLE activity
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.


Index created.


Index created.

DROP  SEQUENCE act_s
               *
ERROR at line 1:
ORA-02289: sequence does not exist



Sequence created.

DROP TABLE activity_tmp
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.


Index created.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

Group counts via model

 PERSON_ID   # Groups
---------- ----------
         3          3
         4          3
         5          3

Elapsed: 00:00:00.08

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.63
Model - All records

 PERSON_ID START_DAT END_DATE  GROUP_STA GROUP_END
---------- --------- --------- --------- ---------
         3 01-JUN-11 03-JUN-11 01-JUN-11 07-JUN-11
           02-JUN-11 05-JUN-11 01-JUN-11 07-JUN-11
           04-JUN-11 07-JUN-11 01-JUN-11 07-JUN-11
           08-JUN-11 16-JUN-11 08-JUN-11 16-JUN-11
           09-JUN-11 14-JUN-11 08-JUN-11 16-JUN-11
           20-JUN-11 30-JUN-11 20-JUN-11 30-JUN-11

         4 01-JUN-11 03-JUN-11 01-JUN-11 07-JUN-11
           02-JUN-11 05-JUN-11 01-JUN-11 07-JUN-11
           04-JUN-11 07-JUN-11 01-JUN-11 07-JUN-11
           08-JUN-11 16-JUN-11 08-JUN-11 16-JUN-11
           09-JUN-11 15-JUN-11 08-JUN-11 16-JUN-11
           20-JUN-11 30-JUN-11 20-JUN-11 30-JUN-11

         5 01-JUN-11 03-JUN-11 01-JUN-11 07-JUN-11
           02-JUN-11 05-JUN-11 01-JUN-11 07-JUN-11
           04-JUN-11 07-JUN-11 01-JUN-11 07-JUN-11
           08-JUN-11 16-JUN-11 08-JUN-11 16-JUN-11
           09-JUN-11 14-JUN-11 08-JUN-11 16-JUN-11
           15-JUN-11 30-JUN-11 15-JUN-11 30-JUN-11


18 rows selected.

Elapsed: 00:00:00.10

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
Recursive Subquery Factor - Groups

 PERSON_ID GROUP_STA GROUP_END   NUM_ROWS
---------- --------- --------- ----------
         3 01-JUN-11 07-JUN-11          3
           08-JUN-11 16-JUN-11          2
           20-JUN-11 30-JUN-11          1

         4 01-JUN-11 07-JUN-11          3
           08-JUN-11 16-JUN-11          2
           20-JUN-11 30-JUN-11          1

         5 01-JUN-11 07-JUN-11          3
           08-JUN-11 16-JUN-11          2
           15-JUN-11 30-JUN-11          1


9 rows selected.

Elapsed: 00:00:00.01

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06

PL/SQL procedure successfully completed.

SQL> 
SQL> PROMPT Item weights generalised bursting example
Item weights generalised bursting example
SQL> PROMPT =========================================
=========================================
SQL> @..\sql\Setup_Wts
DROP TABLE items
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.


Index created.

DROP  SEQUENCE itm_s
               *
ERROR at line 1:
ORA-02289: sequence does not exist



Sequence created.

DROP TABLE items_tmp
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.


Index created.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

Group counts via model for limiting record in next group

CAT                              # Groups
------------------------------ ----------
Rural                                   4
Suburban                                1
Urban                                   7

Elapsed: 00:00:00.00
Group counts via model where group is defined as first id in group not last

CAT                              # Groups
------------------------------ ----------
Rural                                   6
Suburban                                1
Urban                                   8

Elapsed: 00:00:00.01
Group counts via model

CAT                              # Groups
------------------------------ ----------
Rural                                   4
Suburban                                1
Urban                                   5

Elapsed: 00:00:00.00
Model - All records

 ID CAT                                   SEQ     WEIGHT SUB_WEIGHT  FINAL_GRP
--- ------------------------------ ---------- ---------- ---------- ----------
  1 Rural                                  10          2          2          4
  2                                         9          3          5          4
  3                                         8          1          6          4
  4                                         7          4         10          4
  5                                         6         11         11          5
  6                                         5          2          2          9
  7                                         4          2          4          9
  8                                         3          4          8          9
  9                                         2         30         38          9
 10                                         1         12         12         10

 11 Urban                                  10          1          1         12
 12                                         9         12         13         12
 13                                         8          2          2         15
 14                                         7          5          7         15
 15                                         6          7         14         15
 16                                         5         15         15         16
 17                                         4         25         25         17
 18                                         3          2          2         20
 19                                         2          1          3         20
 20                                         1          8         11         20

 21 Suburban                               10          2          2         22
 22                                         9          1          3         22


22 rows selected.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
Recursive Subquery Factor - Groups

 ID CAT                                   SEQ     WEIGHT SUB_WEIGHT  FINAL_GRP
--- ------------------------------ ---------- ---------- ---------- ----------
  1 Rural                                  10          2          2          4
  2                                         9          3          5          4
  3                                         8          1          6          4
  4                                         7          4         10          4
  5                                         6         11         11          5
  6                                         5          2          2          9
  7                                         4          2          4          9
  8                                         3          4          8          9
  9                                         2         30         38          9
 10                                         1         12         12         10

 11 Urban                                  10          1          1         12
 12                                         9         12         13         12
 13                                         8          2          2         15
 14                                         7          5          7         15
 15                                         6          7         14         15
 16                                         5         15         15         16
 17                                         4         25         25         17
 18                                         3          2          2         20
 19                                         2          1          3         20
 20                                         1          8         11         20

 21 Suburban                               10          2          2         22
 22                                         9          1          3         22


22 rows selected.

Elapsed: 00:00:00.01

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07

PL/SQL procedure successfully completed.

SQL> 
SQL> PROMPT Strings package, used by both bracket parsing and string splitting examples
Strings package, used by both bracket parsing and string splitting examples
SQL> PROMPT ===========================================================================
===========================================================================
SQL> @..\pkg\Strings.pks
Types for bracket parsing example, needed for package
DROP TYPE bra_lis_type
*
ERROR at line 1:
ORA-04043: object BRA_LIS_TYPE does not exist



Type created.


Type created.


Package created.

No errors.
SQL> @..\pkg\Strings.pkb

Package body created.

No errors.
SQL> 
SQL> PROMPT String splitting example
String splitting example
SQL> PROMPT ========================
========================
SQL> @..\sql\Setup_Str
DROP TABLE delimited_lists PURGE
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


Commit complete.


Commit complete.

Test Data

     ID LIST_COL
------- ------------------------------------------------------------
      1 token_11|token_12
      2 |token_21|token_22
      3 token_31|token_32|
      4 token_41||token_42
      5 |

xmltable

     ID TOKEN
------- ----------
      1 token_11
        token_12
      2
        token_21
        token_22
      3 token_31
        token_32

      4 token_41

        token_42
      5

12 rows selected.

Elapsed: 00:00:00.20

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
MULTISET

     ID TOKEN
------- ----------
      1 token_11
        token_12
      2
        token_21
        token_22
      3 token_31
        token_32

      4 token_41

        token_42
      5


13 rows selected.

Elapsed: 00:00:00.01

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.11
sys_guid

     ID TOKEN
------- ----------
      1 token_11
        token_12
      2 token_21
        token_22

      3 token_31
        token_32

      4 token_41
        token_42

      5


13 rows selected.

Elapsed: 00:00:00.01

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
Row generator, Instr

     ID TOKEN
------- ----------
      1 token_11
      2
      3 token_31
      4 token_41
      5
      1 token_12
      2 token_21
      3 token_32
      4
      5
      2 token_22
      3
      4 token_42

13 rows selected.

Elapsed: 00:00:00.01

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
Row generator, regex

     ID TOKEN
------- ----------
      1 token_11
        token_12
      2
        token_21
        token_22
      3 token_31
        token_32

      4 token_41

        token_42
      5


13 rows selected.

Elapsed: 00:00:00.01

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
Pipelined function

     ID TOKEN
------- ----------
      1 token_11
        token_12
      2
        token_21
        token_22
      3 token_31
        token_32

      4 token_41

        token_42
      5


13 rows selected.

Elapsed: 00:00:00.04

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
WITH function

     ID TOKEN
------- ----------
      1 token_11
        token_12
      2
        token_21
        token_22
      3 token_31
        token_32

      4 token_41

        token_42
      5


13 rows selected.

Elapsed: 00:00:00.17

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
Model

     ID TOKEN
------- ----------
      1 token_11
        token_12
      2
        token_21
        token_22
      4 token_41
      5

      4
        token_42
      3 token_31
        token_32


13 rows selected.

Elapsed: 00:00:00.02

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06
Recursive subquery factor

     ID TOKEN
------- ----------
      1 token_11
        token_12
      2 token_21
        token_22

      3 token_31
        token_32

      4 token_41
        token_42

      5


13 rows selected.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.06

PL/SQL procedure successfully completed.

SQL> 
SQL> PROMPT Bracket parsing example
Bracket parsing example
SQL> PROMPT =======================
=======================
SQL> @..\sql\Setup_Bra

Type dropped.


Type created.


Type created.

DROP TABLE bracket_strings
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.


4 rows created.


Commit complete.


Commit complete.

Test Data

     ID STR
------- ----------------------------------------
      1  ((Hello ( Hi Hi hi ( A B C ( D)) (EF)
        why Whwy whyhhh )
        )
        )

      2 (1+3*(3-1) + 3*(2+1))
      3 ()()*(())a()(())
      4 b0(b1(b2(b3(x))(xy)))

Elapsed: 00:00:00.00
WFB_QRY

     ID      O_POS      C_POS STR
------- ---------- ---------- ----------------------------------------
      1          2         60 ((Hello ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )
                              )
                              )

                 3         58 (Hello ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )
                              )

                10         56 ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )

                21         33 ( A B C ( D))
                29         32 ( D)
                35         38 (EF)
      2          1         21 (1+3*(3-1) + 3*(2+1))
                 6         10 (3-1)
                16         20 (2+1)
      3          1          2 ()
                 3          4 ()
                 6          9 (())
                 7          8 ()
                11         12 ()
                13         16 (())
                14         15 ()
      4          3         21 (b1(b2(b3(x))(xy)))
                 6         20 (b2(b3(x))(xy))
                 9         15 (b3(x))
                12         14 (x)
                16         19 (xy)

21 rows selected.

Elapsed: 00:00:00.10

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
PFB_QRY

     ID      O_POS      C_POS STR
------- ---------- ---------- ----------------------------------------
      1          2         60 ((Hello ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )
                              )
                              )

                 3         58 (Hello ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )
                              )

                10         56 ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )

                21         33 ( A B C ( D))
                29         32 ( D)
                35         38 (EF)
      2          1         21 (1+3*(3-1) + 3*(2+1))
                 6         10 (3-1)
                16         20 (2+1)
      3          1          2 ()
                 3          4 ()
                 6          9 (())
                 7          8 ()
                11         12 ()
                13         16 (())
                14         15 ()
      4          3         21 (b1(b2(b3(x))(xy)))
                 6         20 (b2(b3(x))(xy))
                 9         15 (b3(x))
                12         14 (x)
                16         19 (xy)

21 rows selected.

Elapsed: 00:00:00.06

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
CBL_QRY

     ID      O_POS      C_POS STR
------- ---------- ---------- ----------------------------------------
      1          2         60 ((Hello ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )
                              )
                              )

                 3         58 (Hello ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )
                              )

                10         56 ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )

                21         33 ( A B C ( D))
                29         32 ( D)
                35         38 (EF)
      2          1         21 (1+3*(3-1) + 3*(2+1))
                 6         10 (3-1)
                16         20 (2+1)
      3          1          2 ()
                 3          4 ()
                 6          9 (())
                 7          8 ()
                11         12 ()
                13         16 (())
                14         15 ()
      4          3         21 (b1(b2(b3(x))(xy)))
                 6         20 (b2(b3(x))(xy))
                 9         15 (b3(x))
                12         14 (x)
                16         19 (xy)

21 rows selected.

Elapsed: 00:00:00.01

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.07
MRB_QRY

     ID      O_POS      C_POS STR
------- ---------- ---------- ----------------------------------------
      1          2         60 ((Hello ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )
                              )
                              )

                 3         58 (Hello ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )
                              )

                10         56 ( Hi Hi hi ( A B C ( D)) (EF)
                              why Whwy whyhhh )

                21         33 ( A B C ( D))
                29         32 ( D)
                35         38 (EF)
      2          1         21 (1+3*(3-1) + 3*(2+1))
                 6         10 (3-1)
                16         20 (2+1)
      3          1          2 ()
                 3          4 ()
                 6          9 (())
                 7          8 ()
                11         12 ()
                13         16 (())
                14         15 ()
      4          3         21 (b1(b2(b3(x))(xy)))
                 6         20 (b2(b3(x))(xy))
                 9         15 (b3(x))
                12         14 (x)
                16         19 (xy)

21 rows selected.

Elapsed: 00:00:00.12

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10

PL/SQL procedure successfully completed.

SQL> 
SQL> PROMPT Fixed-level hierarchy example
Fixed-level hierarchy example
SQL> PROMPT =============================
=============================
SQL> @..\sql\Setup_Org
DROP TYPE org_struct_lis_type
*
ERROR at line 1:
ORA-04043: object ORG_STRUCT_LIS_TYPE does not exist



Type created.


Type created.

DROP TABLE orgs
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.

DROP TABLE org_structure
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.


Index created.


Index created.


Function created.

No errors.
3: 4, 9
2: 1, 3

PL/SQL procedure successfully completed.

orgs

     ID  ORG_LEVEL ORG_NAME
------- ---------- ----------------------------------------------------------------------------------------------------
      1          1 L1 Org 1
      2            L1 Org 2
      3            L1 Org 3
      4          2 L2 Org 1
      5            L2 Org 2
      6            L2 Org 3
      7            L2 Org 4
      8            L2 Org 5
      9            L2 Org 6
     10          3 L3 Org 1
     11            L3 Org 2
     12            L3 Org 3
     13            L3 Org 4
     14            L3 Org 5
     15            L3 Org 6
     16            L3 Org 7
     17            L3 Org 8
     18            L3 Org 9
     19            L3 Org 10
     20            L3 Org 11
     21            L3 Org 12

21 rows selected.

org_structure

     ID STRUCT_LEVEL     ORG_ID CHILD_ORG_ID       FACT
------- ------------ ---------- ------------ ----------
     25            1          1            4  .77318985
     26                       3            5 .114038704
     27                       1            6  .28160113
     28                       2            7 .309219787
     29                       2            8 .862605363
     30                       2            9 .968437796
      1            2          7           10 .305139984
      2                       8           10 .592770207
      3                       9           11 .933487573
      4                       6           11 .741130392
      5                       7           12 .008194184
      6                       7           12 .837647231
      7                       4           13 .978686068
      8                       7           13 .443556558
      9                       8           14 .518460653
     10                       6           14 .958418596
     11                       9           15 .601410112
     12                       8           15 .427867795
     13                       8           16 .370805461
     14                       9           16 .965933586
     15                       9           17 .651631855
     16                       5           17 .638494916
     17                       9           18 .135794554
     18                       8           18 .295827295
     19                       9           19  .88662193
     20                       5           19  .91007326
     21                       6           20 .383299839
     22                       4           20 .579003554
     23                       6           21 .384815723
     24                       8           21 .164600692

30 rows selected.

Joins

ROOT_ORG   LEAF_ORG   FACT_PRODUCT
---------- ---------- ------------
L1 Org 1   L3 Org 11          0.11
L1 Org 1   L3 Org 11          0.45
L1 Org 1   L3 Org 12          0.11
L1 Org 1   L3 Org 2           0.21
L1 Org 1   L3 Org 4           0.76
L1 Org 1   L3 Org 5           0.27
L1 Org 2   L3 Org 1           0.09
L1 Org 2   L3 Org 1           0.51
L1 Org 2   L3 Org 10          0.86
L1 Org 2   L3 Org 12          0.14
L1 Org 2   L3 Org 2           0.90
L1 Org 2   L3 Org 3           0.00
L1 Org 2   L3 Org 3           0.26
L1 Org 2   L3 Org 4           0.14
L1 Org 2   L3 Org 5           0.45
L1 Org 2   L3 Org 6           0.37
L1 Org 2   L3 Org 6           0.58
L1 Org 2   L3 Org 7           0.32
L1 Org 2   L3 Org 7           0.94
L1 Org 2   L3 Org 8           0.63
L1 Org 2   L3 Org 9           0.13
L1 Org 2   L3 Org 9           0.26
L1 Org 3   L3 Org 10          0.10
L1 Org 3   L3 Org 8           0.07

24 rows selected.


PL/SQL procedure successfully completed.

Recursive subquery factor

ROOT_ORG   LEAF_ORG   FACT_PRODUCT
---------- ---------- ------------
L1 Org 1   L3 Org 11          0.11
L1 Org 1   L3 Org 11          0.45
L1 Org 1   L3 Org 12          0.11
L1 Org 1   L3 Org 2           0.21
L1 Org 1   L3 Org 4           0.76
L1 Org 1   L3 Org 5           0.27
L1 Org 2   L3 Org 1           0.51
L1 Org 2   L3 Org 1           0.09
L1 Org 2   L3 Org 10          0.86
L1 Org 2   L3 Org 12          0.14
L1 Org 2   L3 Org 2           0.90
L1 Org 2   L3 Org 3           0.00
L1 Org 2   L3 Org 3           0.26
L1 Org 2   L3 Org 4           0.14
L1 Org 2   L3 Org 5           0.45
L1 Org 2   L3 Org 6           0.58
L1 Org 2   L3 Org 6           0.37
L1 Org 2   L3 Org 7           0.32
L1 Org 2   L3 Org 7           0.94
L1 Org 2   L3 Org 8           0.63
L1 Org 2   L3 Org 9           0.26
L1 Org 2   L3 Org 9           0.13
L1 Org 3   L3 Org 10          0.10
L1 Org 3   L3 Org 8           0.07

24 rows selected.


PL/SQL procedure successfully completed.

Pipelined function main

ROOT_ORG   LEAF_ORG   FACT_PRODUCT
---------- ---------- ------------
L1 Org 1   L3 Org 11          0.45
L1 Org 1   L3 Org 11          0.11
L1 Org 1   L3 Org 12          0.11
L1 Org 1   L3 Org 2           0.21
L1 Org 1   L3 Org 4           0.76
L1 Org 1   L3 Org 5           0.27
L1 Org 2   L3 Org 1           0.09
L1 Org 2   L3 Org 1           0.51
L1 Org 2   L3 Org 10          0.86
L1 Org 2   L3 Org 12          0.14
L1 Org 2   L3 Org 2           0.90
L1 Org 2   L3 Org 3           0.26
L1 Org 2   L3 Org 3           0.00
L1 Org 2   L3 Org 4           0.14
L1 Org 2   L3 Org 5           0.45
L1 Org 2   L3 Org 6           0.37
L1 Org 2   L3 Org 6           0.58
L1 Org 2   L3 Org 7           0.32
L1 Org 2   L3 Org 7           0.94
L1 Org 2   L3 Org 8           0.63
L1 Org 2   L3 Org 9           0.13
L1 Org 2   L3 Org 9           0.26
L1 Org 3   L3 Org 10          0.10
L1 Org 3   L3 Org 8           0.07

24 rows selected.


PL/SQL procedure successfully completed.

Pipelined function internal query

CHILD_ORG_ID FACT_PRODUCT STRUCT_LEVEL
------------ ------------ ------------
           4         0.77            1
           6         0.28            1


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.

SQL> 
SQL> PROMPT DML product sales example
DML product sales example
SQL> PROMPT =========================
=========================
SQL> @..\sql\Setup_Dml
DROP TABLE product_sales
           *
ERROR at line 1:
ORA-00942: table or view does not exist



Table created.


PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


Commit complete.


Index created.


Index created.

Test Data

PRODUCT_ID SALES_DAT
---------- ---------
         1 06-JAN-45
         1 14-OCT-64
         1 23-APR-22
         1 11-FEB-55
         1 15-OCT-43
         1 08-MAR-69
         1 30-JUL-83
         1 19-OCT-99
         1 29-NOV-66
         1 08-SEP-00
         2 10-FEB-11
         2 29-JUN-79
         2 10-OCT-22
         2 19-OCT-10
         2 07-MAY-58
         2 03-JUN-67
         2 18-MAR-76
         2 14-AUG-47
         2 27-OCT-64
         2 19-APR-25

20 rows selected.

Elapsed: 00:00:00.01
Update

2 rows updated.

Elapsed: 00:00:00.08

Rollback complete.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.12

Commit complete.

Elapsed: 00:00:00.00
Merge swap_join_inputs (TGT is case-sensitive due to "")

2 rows merged.

Elapsed: 00:00:00.00

Rollback complete.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
Merge no_swap_join_inputs

2 rows merged.

Elapsed: 00:00:00.00

Rollback complete.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
Merge NL

2 rows merged.

Elapsed: 00:00:00.00

Rollback complete.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.08
Delete

2 rows deleted.

Elapsed: 00:00:00.00

Rollback complete.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10
Insert

2 rows created.

Elapsed: 00:00:00.00

Rollback complete.

Elapsed: 00:00:00.01

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.09
CTAS

Table created.

Elapsed: 00:00:00.48

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.10

Table dropped.

Elapsed: 00:00:00.07

Table renamed.

Elapsed: 00:00:00.01

Index created.

Elapsed: 00:00:00.03

Index created.

Elapsed: 00:00:00.00

TEXT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  c3y1qmav4ucqa, child number 0
-------------------------------------
UPDATE /*+ gather_plan_statistics UPD_DML */ product_sales sd    SET
sd.sales_date = DATE '1900-01-01'  WHERE 1=1 AND sd.sales_date = (
SELECT Min(sd2.sales_date)      FROM product_sales sd2     WHERE
sd.product_id = sd2.product_id  )    AND sd.sales_date != DATE
'1900-01-01'

Plan hash value: 582207799

------------------------------------------------------------------------------------------------------------------
| Id  | Operation                              | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |
------------------------------------------------------------------------------------------------------------------
|   0 | UPDATE STATEMENT                       |               |      1 |        |      0 |00:00:00.01 |      22 |
|   1 |  UPDATE                                | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      22 |
|*  2 |   FILTER                               |               |      1 |        |      2 |00:00:00.01 |      10 |
|*  3 |    TABLE ACCESS FULL                   | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |
|   4 |    SORT AGGREGATE                      |               |      2 |      1 |      2 |00:00:00.01 |       3 |
|   5 |     TABLE ACCESS BY INDEX ROWID BATCHED| PRODUCT_SALES |      2 |      1 |     20 |00:00:00.01 |       3 |
|*  6 |      INDEX RANGE SCAN                  | PS_PRD_N1     |      2 |      1 |     20 |00:00:00.01 |       2 |
------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("SD"."SALES_DATE"=)
   3 - filter("SD"."SALES_DATE"<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
   6 - access("SD2"."PRODUCT_ID"=:B1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  c3y1qmav4ucqa, child number 0
-------------------------------------
UPDATE /*+ gather_plan_statistics UPD_DML */ product_sales sd    SET
sd.sales_date = DATE '1900-01-01'  WHERE 1=1 AND sd.sales_date = (
SELECT Min(sd2.sales_date)      FROM product_sales sd2     WHERE
sd.product_id = sd2.product_id  )    AND sd.sales_date != DATE
'1900-01-01'

Plan hash value: 582207799

--------------------------------------------------------------------------------------------------------
| Id  | Operation                              | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------------------------------
|   0 | UPDATE STATEMENT                       |               |       |       |     5 (100)|          |
|   1 |  UPDATE                                | PRODUCT_SALES |       |       |            |          |
|*  2 |   FILTER                               |               |       |       |            |          |
|*  3 |    TABLE ACCESS FULL                   | PRODUCT_SALES |    20 |   440 |     3   (0)| 00:00:01 |
|   4 |    SORT AGGREGATE                      |               |     1 |    22 |            |          |
|   5 |     TABLE ACCESS BY INDEX ROWID BATCHED| PRODUCT_SALES |     1 |    22 |     2   (0)| 00:00:01 |
|*  6 |      INDEX RANGE SCAN                  | PS_PRD_N1     |     1 |       |     1   (0)| 00:00:01 |
--------------------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$1")
      OUTLINE_LEAF(@"UPD$1")
      FULL(@"UPD$1" "SD"@"UPD$1")
      PQ_FILTER(@"UPD$1" SERIAL)
      INDEX_RS_ASC(@"SEL$1" "SD2"@"SEL$1" ("PRODUCT_SALES"."PRODUCT_ID"))
      BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$1" "SD2"@"SEL$1")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("SD"."SALES_DATE"=)
   3 - filter("SD"."SALES_DATE"<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
   6 - access("SD2"."PRODUCT_ID"=:B1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  fbtwzzf5gpt99, child number 0
-------------------------------------
MERGE  /*+ gather_plan_statistics MRG_DML
swap_join_inputs(@"SEL$F5BB74E1" "TGT"@"SEL$1") */ INTO product_sales
tgt USING (SELECT *        FROM (          SELECT rowid arowid,
product_id, DATE '1900-01-01' sales_date,                 sales_date AS
old_sales_date,                 Rank() OVER (PARTITION BY product_id
ORDER BY sales_date) rn          FROM   product_sales        )
WHERE 1=1 AND rn = 1 AND 0 = Decode(sales_date, old_sales_date, 1, 0))
src ON (tgt.rowid = src.arowid) WHEN MATCHED THEN   UPDATE SET
tgt.sales_date = src.sales_date

Plan hash value: 949972977

----------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
----------------------------------------------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT             |               |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   1 |  MERGE                      | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   2 |   VIEW                      |               |      1 |        |      2 |00:00:00.01 |      14 |       |       |          |
|*  3 |    HASH JOIN                |               |      1 |     20 |      2 |00:00:00.01 |      14 |  1355K|  1355K| 1275K (0)|
|   4 |     TABLE ACCESS FULL       | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
|*  5 |     VIEW                    |               |      1 |     20 |      2 |00:00:00.01 |       7 |       |       |          |
|*  6 |      WINDOW SORT PUSHED RANK|               |      1 |     20 |      2 |00:00:00.01 |       7 | 73728 | 73728 |          |
|   7 |       TABLE ACCESS FULL     | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
----------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("TGT".ROWID="from$_subquery$_007"."AROWID")
   5 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0)=0))
   6 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  fbtwzzf5gpt99, child number 0
-------------------------------------
MERGE  /*+ gather_plan_statistics MRG_DML
swap_join_inputs(@"SEL$F5BB74E1" "TGT"@"SEL$1") */ INTO product_sales
tgt USING (SELECT *        FROM (          SELECT rowid arowid,
product_id, DATE '1900-01-01' sales_date,                 sales_date AS
old_sales_date,                 Rank() OVER (PARTITION BY product_id
ORDER BY sales_date) rn          FROM   product_sales        )
WHERE 1=1 AND rn = 1 AND 0 = Decode(sales_date, old_sales_date, 1, 0))
src ON (tgt.rowid = src.arowid) WHEN MATCHED THEN   UPDATE SET
tgt.sales_date = src.sales_date

Plan hash value: 949972977

---------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT             |               |       |       |     7 (100)|          |
|   1 |  MERGE                      | PRODUCT_SALES |       |       |            |          |
|   2 |   VIEW                      |               |       |       |            |          |
|*  3 |    HASH JOIN                |               |    20 |  1740 |     7  (15)| 00:00:01 |
|   4 |     TABLE ACCESS FULL       | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
|*  5 |     VIEW                    |               |    20 |  1060 |     4  (25)| 00:00:01 |
|*  6 |      WINDOW SORT PUSHED RANK|               |    20 |   680 |     4  (25)| 00:00:01 |
|   7 |       TABLE ACCESS FULL     | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
---------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$3")
      OUTLINE_LEAF(@"SEL$F5BB74E1")
      MERGE(@"SEL$2" >"SEL$1")
      OUTLINE_LEAF(@"SEL$5")
      OUTLINE_LEAF(@"SEL$4")
      OUTLINE_LEAF(@"MRG$1")
      OUTLINE(@"SEL$1")
      OUTLINE(@"SEL$2")
      NO_ACCESS(@"MRG$1" "from$_subquery$_009"@"MRG$1")
      NO_ACCESS(@"MRG$1" "SRC"@"MRG$1")
      FULL(@"MRG$1" "TGT"@"MRG$1")
      LEADING(@"MRG$1" "from$_subquery$_009"@"MRG$1" "SRC"@"MRG$1" "TGT"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "SRC"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "TGT"@"MRG$1")
      NO_ACCESS(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2")
      FULL(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      LEADING(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1")
      USE_HASH(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      SWAP_JOIN_INPUTS(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      NO_ACCESS(@"SEL$4" "from$_subquery$_004"@"SEL$4")
      FULL(@"SEL$5" "PRODUCT_SALES"@"SEL$5")
      FULL(@"SEL$3" "PRODUCT_SALES"@"SEL$3")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("TGT".ROWID="from$_subquery$_007"."AROWID")
   5 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0
              )=0))
   6 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  gwax6xp564nhu, child number 0
-------------------------------------
MERGE /*+ gather_plan_statistics MHT_DML
no_swap_join_inputs(@"SEL$F5BB74E1" "TGT"@"SEL$1") */ INTO
product_sales tgt USING (SELECT *        FROM (          SELECT rowid
arowid, product_id, DATE '1900-01-01' sales_date,
sales_date AS old_sales_date,                 Rank() OVER (PARTITION BY
product_id ORDER BY sales_date) rn          FROM   product_sales
)        WHERE 1=1 AND rn = 1 AND 0 = Decode(sales_date,
old_sales_date, 1, 0)) src ON (tgt.rowid = src.arowid) WHEN MATCHED
THEN   UPDATE SET     tgt.sales_date = src.sales_date

Plan hash value: 2519372665

----------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
----------------------------------------------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT             |               |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   1 |  MERGE                      | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   2 |   VIEW                      |               |      1 |        |      2 |00:00:00.01 |      14 |       |       |          |
|*  3 |    HASH JOIN                |               |      1 |     20 |      2 |00:00:00.01 |      14 |  1152K|  1152K|  582K (0)|
|*  4 |     VIEW                    |               |      1 |     20 |      2 |00:00:00.01 |       7 |       |       |          |
|*  5 |      WINDOW SORT PUSHED RANK|               |      1 |     20 |      2 |00:00:00.01 |       7 | 73728 | 73728 |          |
|   6 |       TABLE ACCESS FULL     | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
|   7 |     TABLE ACCESS FULL       | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
----------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("TGT".ROWID="from$_subquery$_007"."AROWID")
   4 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0)=0))
   5 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  gwax6xp564nhu, child number 0
-------------------------------------
MERGE /*+ gather_plan_statistics MHT_DML
no_swap_join_inputs(@"SEL$F5BB74E1" "TGT"@"SEL$1") */ INTO
product_sales tgt USING (SELECT *        FROM (          SELECT rowid
arowid, product_id, DATE '1900-01-01' sales_date,
sales_date AS old_sales_date,                 Rank() OVER (PARTITION BY
product_id ORDER BY sales_date) rn          FROM   product_sales
)        WHERE 1=1 AND rn = 1 AND 0 = Decode(sales_date,
old_sales_date, 1, 0)) src ON (tgt.rowid = src.arowid) WHEN MATCHED
THEN   UPDATE SET     tgt.sales_date = src.sales_date

Plan hash value: 2519372665

---------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT             |               |       |       |     7 (100)|          |
|   1 |  MERGE                      | PRODUCT_SALES |       |       |            |          |
|   2 |   VIEW                      |               |       |       |            |          |
|*  3 |    HASH JOIN                |               |    20 |  1740 |     7  (15)| 00:00:01 |
|*  4 |     VIEW                    |               |    20 |  1060 |     4  (25)| 00:00:01 |
|*  5 |      WINDOW SORT PUSHED RANK|               |    20 |   680 |     4  (25)| 00:00:01 |
|   6 |       TABLE ACCESS FULL     | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
|   7 |     TABLE ACCESS FULL       | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
---------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$3")
      OUTLINE_LEAF(@"SEL$F5BB74E1")
      MERGE(@"SEL$2" >"SEL$1")
      OUTLINE_LEAF(@"SEL$5")
      OUTLINE_LEAF(@"SEL$4")
      OUTLINE_LEAF(@"MRG$1")
      OUTLINE(@"SEL$1")
      OUTLINE(@"SEL$2")
      NO_ACCESS(@"MRG$1" "from$_subquery$_009"@"MRG$1")
      NO_ACCESS(@"MRG$1" "SRC"@"MRG$1")
      FULL(@"MRG$1" "TGT"@"MRG$1")
      LEADING(@"MRG$1" "from$_subquery$_009"@"MRG$1" "SRC"@"MRG$1" "TGT"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "SRC"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "TGT"@"MRG$1")
      NO_ACCESS(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2")
      FULL(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      LEADING(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1")
      USE_HASH(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      NO_ACCESS(@"SEL$4" "from$_subquery$_004"@"SEL$4")
      FULL(@"SEL$5" "PRODUCT_SALES"@"SEL$5")
      FULL(@"SEL$3" "PRODUCT_SALES"@"SEL$3")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("TGT".ROWID="from$_subquery$_007"."AROWID")
   4 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0
              )=0))
   5 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  637c3ufvn654k, child number 0
-------------------------------------
MERGE /*+ gather_plan_statistics MH2_DML leading(@"SEL$F5BB74E1"
"from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1") use_nl(@"SEL$F5BB74E1"
"TGT"@"SEL$1") */ INTO product_sales tgt USING (SELECT *        FROM (
        SELECT rowid arowid, product_id, DATE '1900-01-01' sales_date,
               sales_date AS old_sales_date,                 Rank()
OVER (PARTITION BY product_id ORDER BY sales_date) rn          FROM
product_sales        )        WHERE 1=1 AND rn = 1 AND 0 =
Decode(sales_date, old_sales_date, 1, 0)) src ON (tgt.rowid =
src.arowid) WHEN MATCHED THEN   UPDATE SET     tgt.sales_date =
src.sales_date

Plan hash value: 178833565

---------------------------------------------------------------------------------------------------------
| Id  | Operation                     | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |
---------------------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT               |               |      1 |        |      0 |00:00:00.01 |      20 |
|   1 |  MERGE                        | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      20 |
|   2 |   VIEW                        |               |      1 |        |      2 |00:00:00.01 |       8 |
|   3 |    NESTED LOOPS               |               |      1 |     20 |      2 |00:00:00.01 |       8 |
|*  4 |     VIEW                      |               |      1 |     20 |      2 |00:00:00.01 |       7 |
|*  5 |      WINDOW SORT PUSHED RANK  |               |      1 |     20 |      2 |00:00:00.01 |       7 |
|   6 |       TABLE ACCESS FULL       | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |
|   7 |     TABLE ACCESS BY USER ROWID| PRODUCT_SALES |      2 |      1 |      2 |00:00:00.01 |       1 |
---------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0)=0))
   5 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  637c3ufvn654k, child number 0
-------------------------------------
MERGE /*+ gather_plan_statistics MH2_DML leading(@"SEL$F5BB74E1"
"from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1") use_nl(@"SEL$F5BB74E1"
"TGT"@"SEL$1") */ INTO product_sales tgt USING (SELECT *        FROM (
        SELECT rowid arowid, product_id, DATE '1900-01-01' sales_date,
               sales_date AS old_sales_date,                 Rank()
OVER (PARTITION BY product_id ORDER BY sales_date) rn          FROM
product_sales        )        WHERE 1=1 AND rn = 1 AND 0 =
Decode(sales_date, old_sales_date, 1, 0)) src ON (tgt.rowid =
src.arowid) WHEN MATCHED THEN   UPDATE SET     tgt.sales_date =
src.sales_date

Plan hash value: 178833565

-----------------------------------------------------------------------------------------------
| Id  | Operation                     | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT               |               |       |       |    24 (100)|          |
|   1 |  MERGE                        | PRODUCT_SALES |       |       |            |          |
|   2 |   VIEW                        |               |       |       |            |          |
|   3 |    NESTED LOOPS               |               |    20 |  1740 |    24   (5)| 00:00:01 |
|*  4 |     VIEW                      |               |    20 |  1060 |     4  (25)| 00:00:01 |
|*  5 |      WINDOW SORT PUSHED RANK  |               |    20 |   680 |     4  (25)| 00:00:01 |
|   6 |       TABLE ACCESS FULL       | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
|   7 |     TABLE ACCESS BY USER ROWID| PRODUCT_SALES |     1 |    34 |     1   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$3")
      OUTLINE_LEAF(@"SEL$F5BB74E1")
      MERGE(@"SEL$2" >"SEL$1")
      OUTLINE_LEAF(@"SEL$5")
      OUTLINE_LEAF(@"SEL$4")
      OUTLINE_LEAF(@"MRG$1")
      OUTLINE(@"SEL$1")
      OUTLINE(@"SEL$2")
      NO_ACCESS(@"MRG$1" "from$_subquery$_009"@"MRG$1")
      NO_ACCESS(@"MRG$1" "SRC"@"MRG$1")
      FULL(@"MRG$1" "TGT"@"MRG$1")
      LEADING(@"MRG$1" "from$_subquery$_009"@"MRG$1" "SRC"@"MRG$1" "TGT"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "SRC"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "TGT"@"MRG$1")
      NO_ACCESS(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2")
      ROWID(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      LEADING(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1")
      USE_NL(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      NO_ACCESS(@"SEL$4" "from$_subquery$_004"@"SEL$4")
      FULL(@"SEL$5" "PRODUCT_SALES"@"SEL$5")
      FULL(@"SEL$3" "PRODUCT_SALES"@"SEL$3")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0)=
              0))
   5 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  39c8mc39avt7c, child number 0
-------------------------------------
DELETE /*+ gather_plan_statistics DEL_DML */ product_sales sd  WHERE
1=1 AND (product_id, sales_date) IN (     SELECT product_id,
Min(sales_date)       FROM product_sales      WHERE 1=1      GROUP BY
product_id     HAVING Min(sales_date) != DATE '1900-01-01'     )

Plan hash value: 4229131765

-----------------------------------------------------------------------------------------------------------------------------
| Id  | Operation              | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
-----------------------------------------------------------------------------------------------------------------------------
|   0 | DELETE STATEMENT       |               |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   1 |  DELETE                | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|*  2 |   HASH JOIN SEMI       |               |      1 |      1 |      2 |00:00:00.01 |      14 |  1355K|  1355K| 1483K (0)|
|   3 |    TABLE ACCESS FULL   | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
|   4 |    VIEW                | VW_NSO_1      |      1 |     20 |      2 |00:00:00.01 |       7 |       |       |          |
|*  5 |     FILTER             |               |      1 |        |      2 |00:00:00.01 |       7 |       |       |          |
|   6 |      SORT GROUP BY     |               |      1 |     20 |      2 |00:00:00.01 |       7 | 73728 | 73728 |          |
|   7 |       TABLE ACCESS FULL| PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
-----------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("PRODUCT_ID"="PRODUCT_ID" AND "SALES_DATE"="MIN(SALES_DATE)")
   5 - filter(MIN("SALES_DATE")<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  39c8mc39avt7c, child number 0
-------------------------------------
DELETE /*+ gather_plan_statistics DEL_DML */ product_sales sd  WHERE
1=1 AND (product_id, sales_date) IN (     SELECT product_id,
Min(sales_date)       FROM product_sales      WHERE 1=1      GROUP BY
product_id     HAVING Min(sales_date) != DATE '1900-01-01'     )

Plan hash value: 4229131765

----------------------------------------------------------------------------------------
| Id  | Operation              | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | DELETE STATEMENT       |               |       |       |     7 (100)|          |
|   1 |  DELETE                | PRODUCT_SALES |       |       |            |          |
|*  2 |   HASH JOIN SEMI       |               |     1 |    44 |     7  (15)| 00:00:01 |
|   3 |    TABLE ACCESS FULL   | PRODUCT_SALES |    20 |   440 |     3   (0)| 00:00:01 |
|   4 |    VIEW                | VW_NSO_1      |    20 |   440 |     4  (25)| 00:00:01 |
|*  5 |     FILTER             |               |       |       |            |          |
|   6 |      SORT GROUP BY     |               |    20 |   440 |     4  (25)| 00:00:01 |
|   7 |       TABLE ACCESS FULL| PRODUCT_SALES |    20 |   440 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$7D4DB4AA")
      OUTLINE_LEAF(@"SEL$3BA1AD7C")
      UNNEST(@"SEL$1" UNNEST_SEMIJ_VIEW)
      OUTLINE(@"SEL$1")
      OUTLINE(@"DEL$1")
      FULL(@"SEL$3BA1AD7C" "SD"@"DEL$1")
      NO_ACCESS(@"SEL$3BA1AD7C" "VW_NSO_1"@"SEL$3BA1AD7C")
      LEADING(@"SEL$3BA1AD7C" "SD"@"DEL$1" "VW_NSO_1"@"SEL$3BA1AD7C")
      USE_HASH(@"SEL$3BA1AD7C" "VW_NSO_1"@"SEL$3BA1AD7C")
      FULL(@"SEL$7D4DB4AA" "PRODUCT_SALES"@"SEL$1")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("PRODUCT_ID"="PRODUCT_ID" AND "SALES_DATE"="MIN(SALES_DATE)")
   5 - filter(MIN("SALES_DATE")<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd
              hh24:mi:ss'))

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  faj0v2vmamf60, child number 0
-------------------------------------
INSERT INTO product_sales WITH date_mins AS (     SELECT product_id
  FROM product_sales      GROUP BY product_id     HAVING
Min(sales_date) != DATE '1900-01-01' ) SELECT /*+
gather_plan_statistics INS_DML */ product_id, DATE '1900-01-01'   FROM
date_mins  WHERE 1=1

Plan hash value: 2420629719

-------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
-------------------------------------------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |               |      1 |        |      0 |00:00:00.01 |      15 |       |       |          |
|   1 |  LOAD TABLE CONVENTIONAL | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      15 |       |       |          |
|*  2 |   FILTER                 |               |      1 |        |      2 |00:00:00.01 |       7 |       |       |          |
|   3 |    HASH GROUP BY         |               |      1 |     20 |      2 |00:00:00.01 |       7 |  1558K|  1558K|  619K (0)|
|   4 |     TABLE ACCESS FULL    | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
-------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter(MIN("SALES_DATE")<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  faj0v2vmamf60, child number 0
-------------------------------------
INSERT INTO product_sales WITH date_mins AS (     SELECT product_id
  FROM product_sales      GROUP BY product_id     HAVING
Min(sales_date) != DATE '1900-01-01' ) SELECT /*+
gather_plan_statistics INS_DML */ product_id, DATE '1900-01-01'   FROM
date_mins  WHERE 1=1

Plan hash value: 2420629719

------------------------------------------------------------------------------------------
| Id  | Operation                | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |               |       |       |     4 (100)|          |
|   1 |  LOAD TABLE CONVENTIONAL | PRODUCT_SALES |       |       |            |          |
|*  2 |   FILTER                 |               |       |       |            |          |
|   3 |    HASH GROUP BY         |               |    20 |   440 |     4  (25)| 00:00:01 |
|   4 |     TABLE ACCESS FULL    | PRODUCT_SALES |    20 |   440 |     3   (0)| 00:00:01 |
------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$58A6D7F6")
      MERGE(@"SEL$1" >"SEL$2")
      OUTLINE_LEAF(@"INS$1")
      OUTLINE(@"SEL$2")
      OUTLINE(@"SEL$1")
      FULL(@"INS$1" "PRODUCT_SALES"@"INS$1")
      FULL(@"SEL$58A6D7F6" "PRODUCT_SALES"@"SEL$1")
      USE_HASH_AGGREGATION(@"SEL$58A6D7F6")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter(MIN("SALES_DATE")<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd
              hh24:mi:ss'))

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  gn5xfra4gqfqw, child number 0
-------------------------------------
CREATE TABLE product_sales_ctas AS SELECT /*+ gather_plan_statistics
CTAS_DDL */ product_id,        CASE WHEN sales_date = Min(sales_date)
OVER (PARTITION BY product_id) THEN DATE '1900-01-01' ELSE sales_date
END sales_date   FROM product_sales   WHERE 1=1

Plan hash value: 836769672

-----------------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                        | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers | Writes |  OMem |  1Mem | Used-Mem |
-----------------------------------------------------------------------------------------------------------------------------------------------------
|   0 | CREATE TABLE STATEMENT           |                    |      1 |        |      0 |00:00:00.01 |      62 |      1 |       |       |          |
|   1 |  LOAD AS SELECT                  | PRODUCT_SALES_CTAS |      1 |        |      0 |00:00:00.01 |      62 |      1 |  1040K|  1040K| 1040K (0)|
|   2 |   OPTIMIZER STATISTICS GATHERING |                    |      1 |     20 |     20 |00:00:00.01 |       7 |      0 |   256K|   256K|  256K (0)|
|   3 |    WINDOW SORT                   |                    |      1 |     20 |     20 |00:00:00.01 |       7 |      0 |  2048 |  2048 | 2048  (0)|
|   4 |     TABLE ACCESS FULL            | PRODUCT_SALES      |      1 |     20 |     20 |00:00:00.01 |       7 |      0 |       |       |          |
-----------------------------------------------------------------------------------------------------------------------------------------------------

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  gn5xfra4gqfqw, child number 0
-------------------------------------
CREATE TABLE product_sales_ctas AS SELECT /*+ gather_plan_statistics
CTAS_DDL */ product_id,        CASE WHEN sales_date = Min(sales_date)
OVER (PARTITION BY product_id) THEN DATE '1900-01-01' ELSE sales_date
END sales_date   FROM product_sales   WHERE 1=1

Plan hash value: 836769672

-------------------------------------------------------------------------------------------------------
| Id  | Operation                        | Name               | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------------------
|   0 | CREATE TABLE STATEMENT           |                    |       |       |     5 (100)|          |
|   1 |  LOAD AS SELECT                  | PRODUCT_SALES_CTAS |       |       |            |          |
|   2 |   OPTIMIZER STATISTICS GATHERING |                    |    20 |   440 |     4  (25)| 00:00:01 |
|   3 |    WINDOW SORT                   |                    |    20 |   440 |     4  (25)| 00:00:01 |
|   4 |     TABLE ACCESS FULL            | PRODUCT_SALES      |    20 |   440 |     3   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$1")
      FULL(@"SEL$1" "PRODUCT_SALES"@"SEL$1")
      END_OUTLINE_DATA
  */

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)


641 rows selected.

Elapsed: 00:00:00.22

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
SQL> 
SQL> PROMPT Bench_Datasets package body creation
Bench_Datasets package body creation
SQL> PROMPT ====================================
====================================
SQL> 
SQL> @..\pkg\Bench_Datasets.pkb

Package body created.

Elapsed: 00:00:00.27
No errors.
SQL> 
SQL> @..\sql\L_Log_Default

TEXT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  c3y1qmav4ucqa, child number 0
-------------------------------------
UPDATE /*+ gather_plan_statistics UPD_DML */ product_sales sd    SET
sd.sales_date = DATE '1900-01-01'  WHERE 1=1 AND sd.sales_date = (
SELECT Min(sd2.sales_date)      FROM product_sales sd2     WHERE
sd.product_id = sd2.product_id  )    AND sd.sales_date != DATE
'1900-01-01'

Plan hash value: 582207799

------------------------------------------------------------------------------------------------------------------
| Id  | Operation                              | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |
------------------------------------------------------------------------------------------------------------------
|   0 | UPDATE STATEMENT                       |               |      1 |        |      0 |00:00:00.01 |      22 |
|   1 |  UPDATE                                | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      22 |
|*  2 |   FILTER                               |               |      1 |        |      2 |00:00:00.01 |      10 |
|*  3 |    TABLE ACCESS FULL                   | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |
|   4 |    SORT AGGREGATE                      |               |      2 |      1 |      2 |00:00:00.01 |       3 |
|   5 |     TABLE ACCESS BY INDEX ROWID BATCHED| PRODUCT_SALES |      2 |      1 |     20 |00:00:00.01 |       3 |
|*  6 |      INDEX RANGE SCAN                  | PS_PRD_N1     |      2 |      1 |     20 |00:00:00.01 |       2 |
------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("SD"."SALES_DATE"=)
   3 - filter("SD"."SALES_DATE"<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
   6 - access("SD2"."PRODUCT_ID"=:B1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  c3y1qmav4ucqa, child number 0
-------------------------------------
UPDATE /*+ gather_plan_statistics UPD_DML */ product_sales sd    SET
sd.sales_date = DATE '1900-01-01'  WHERE 1=1 AND sd.sales_date = (
SELECT Min(sd2.sales_date)      FROM product_sales sd2     WHERE
sd.product_id = sd2.product_id  )    AND sd.sales_date != DATE
'1900-01-01'

Plan hash value: 582207799

--------------------------------------------------------------------------------------------------------
| Id  | Operation                              | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------------------------------
|   0 | UPDATE STATEMENT                       |               |       |       |     5 (100)|          |
|   1 |  UPDATE                                | PRODUCT_SALES |       |       |            |          |
|*  2 |   FILTER                               |               |       |       |            |          |
|*  3 |    TABLE ACCESS FULL                   | PRODUCT_SALES |    20 |   440 |     3   (0)| 00:00:01 |
|   4 |    SORT AGGREGATE                      |               |     1 |    22 |            |          |
|   5 |     TABLE ACCESS BY INDEX ROWID BATCHED| PRODUCT_SALES |     1 |    22 |     2   (0)| 00:00:01 |
|*  6 |      INDEX RANGE SCAN                  | PS_PRD_N1     |     1 |       |     1   (0)| 00:00:01 |
--------------------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$1")
      OUTLINE_LEAF(@"UPD$1")
      FULL(@"UPD$1" "SD"@"UPD$1")
      PQ_FILTER(@"UPD$1" SERIAL)
      INDEX_RS_ASC(@"SEL$1" "SD2"@"SEL$1" ("PRODUCT_SALES"."PRODUCT_ID"))
      BATCH_TABLE_ACCESS_BY_ROWID(@"SEL$1" "SD2"@"SEL$1")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("SD"."SALES_DATE"=)
   3 - filter("SD"."SALES_DATE"<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
   6 - access("SD2"."PRODUCT_ID"=:B1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  fbtwzzf5gpt99, child number 0
-------------------------------------
MERGE  /*+ gather_plan_statistics MRG_DML
swap_join_inputs(@"SEL$F5BB74E1" "TGT"@"SEL$1") */ INTO product_sales
tgt USING (SELECT *        FROM (          SELECT rowid arowid,
product_id, DATE '1900-01-01' sales_date,                 sales_date AS
old_sales_date,                 Rank() OVER (PARTITION BY product_id
ORDER BY sales_date) rn          FROM   product_sales        )
WHERE 1=1 AND rn = 1 AND 0 = Decode(sales_date, old_sales_date, 1, 0))
src ON (tgt.rowid = src.arowid) WHEN MATCHED THEN   UPDATE SET
tgt.sales_date = src.sales_date

Plan hash value: 949972977

----------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
----------------------------------------------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT             |               |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   1 |  MERGE                      | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   2 |   VIEW                      |               |      1 |        |      2 |00:00:00.01 |      14 |       |       |          |
|*  3 |    HASH JOIN                |               |      1 |     20 |      2 |00:00:00.01 |      14 |  1355K|  1355K| 1275K (0)|
|   4 |     TABLE ACCESS FULL       | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
|*  5 |     VIEW                    |               |      1 |     20 |      2 |00:00:00.01 |       7 |       |       |          |
|*  6 |      WINDOW SORT PUSHED RANK|               |      1 |     20 |      2 |00:00:00.01 |       7 | 73728 | 73728 |          |
|   7 |       TABLE ACCESS FULL     | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
----------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("TGT".ROWID="from$_subquery$_007"."AROWID")
   5 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0)=0))
   6 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  fbtwzzf5gpt99, child number 0
-------------------------------------
MERGE  /*+ gather_plan_statistics MRG_DML
swap_join_inputs(@"SEL$F5BB74E1" "TGT"@"SEL$1") */ INTO product_sales
tgt USING (SELECT *        FROM (          SELECT rowid arowid,
product_id, DATE '1900-01-01' sales_date,                 sales_date AS
old_sales_date,                 Rank() OVER (PARTITION BY product_id
ORDER BY sales_date) rn          FROM   product_sales        )
WHERE 1=1 AND rn = 1 AND 0 = Decode(sales_date, old_sales_date, 1, 0))
src ON (tgt.rowid = src.arowid) WHEN MATCHED THEN   UPDATE SET
tgt.sales_date = src.sales_date

Plan hash value: 949972977

---------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT             |               |       |       |     7 (100)|          |
|   1 |  MERGE                      | PRODUCT_SALES |       |       |            |          |
|   2 |   VIEW                      |               |       |       |            |          |
|*  3 |    HASH JOIN                |               |    20 |  1740 |     7  (15)| 00:00:01 |
|   4 |     TABLE ACCESS FULL       | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
|*  5 |     VIEW                    |               |    20 |  1060 |     4  (25)| 00:00:01 |
|*  6 |      WINDOW SORT PUSHED RANK|               |    20 |   680 |     4  (25)| 00:00:01 |
|   7 |       TABLE ACCESS FULL     | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
---------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$3")
      OUTLINE_LEAF(@"SEL$F5BB74E1")
      MERGE(@"SEL$2" >"SEL$1")
      OUTLINE_LEAF(@"SEL$5")
      OUTLINE_LEAF(@"SEL$4")
      OUTLINE_LEAF(@"MRG$1")
      OUTLINE(@"SEL$1")
      OUTLINE(@"SEL$2")
      NO_ACCESS(@"MRG$1" "from$_subquery$_009"@"MRG$1")
      NO_ACCESS(@"MRG$1" "SRC"@"MRG$1")
      FULL(@"MRG$1" "TGT"@"MRG$1")
      LEADING(@"MRG$1" "from$_subquery$_009"@"MRG$1" "SRC"@"MRG$1" "TGT"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "SRC"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "TGT"@"MRG$1")
      NO_ACCESS(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2")
      FULL(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      LEADING(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1")
      USE_HASH(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      SWAP_JOIN_INPUTS(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      NO_ACCESS(@"SEL$4" "from$_subquery$_004"@"SEL$4")
      FULL(@"SEL$5" "PRODUCT_SALES"@"SEL$5")
      FULL(@"SEL$3" "PRODUCT_SALES"@"SEL$3")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("TGT".ROWID="from$_subquery$_007"."AROWID")
   5 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0
              )=0))
   6 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  gwax6xp564nhu, child number 0
-------------------------------------
MERGE /*+ gather_plan_statistics MHT_DML
no_swap_join_inputs(@"SEL$F5BB74E1" "TGT"@"SEL$1") */ INTO
product_sales tgt USING (SELECT *        FROM (          SELECT rowid
arowid, product_id, DATE '1900-01-01' sales_date,
sales_date AS old_sales_date,                 Rank() OVER (PARTITION BY
product_id ORDER BY sales_date) rn          FROM   product_sales
)        WHERE 1=1 AND rn = 1 AND 0 = Decode(sales_date,
old_sales_date, 1, 0)) src ON (tgt.rowid = src.arowid) WHEN MATCHED
THEN   UPDATE SET     tgt.sales_date = src.sales_date

Plan hash value: 2519372665

----------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
----------------------------------------------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT             |               |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   1 |  MERGE                      | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   2 |   VIEW                      |               |      1 |        |      2 |00:00:00.01 |      14 |       |       |          |
|*  3 |    HASH JOIN                |               |      1 |     20 |      2 |00:00:00.01 |      14 |  1152K|  1152K|  582K (0)|
|*  4 |     VIEW                    |               |      1 |     20 |      2 |00:00:00.01 |       7 |       |       |          |
|*  5 |      WINDOW SORT PUSHED RANK|               |      1 |     20 |      2 |00:00:00.01 |       7 | 73728 | 73728 |          |
|   6 |       TABLE ACCESS FULL     | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
|   7 |     TABLE ACCESS FULL       | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
----------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("TGT".ROWID="from$_subquery$_007"."AROWID")
   4 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0)=0))
   5 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  gwax6xp564nhu, child number 0
-------------------------------------
MERGE /*+ gather_plan_statistics MHT_DML
no_swap_join_inputs(@"SEL$F5BB74E1" "TGT"@"SEL$1") */ INTO
product_sales tgt USING (SELECT *        FROM (          SELECT rowid
arowid, product_id, DATE '1900-01-01' sales_date,
sales_date AS old_sales_date,                 Rank() OVER (PARTITION BY
product_id ORDER BY sales_date) rn          FROM   product_sales
)        WHERE 1=1 AND rn = 1 AND 0 = Decode(sales_date,
old_sales_date, 1, 0)) src ON (tgt.rowid = src.arowid) WHEN MATCHED
THEN   UPDATE SET     tgt.sales_date = src.sales_date

Plan hash value: 2519372665

---------------------------------------------------------------------------------------------
| Id  | Operation                   | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT             |               |       |       |     7 (100)|          |
|   1 |  MERGE                      | PRODUCT_SALES |       |       |            |          |
|   2 |   VIEW                      |               |       |       |            |          |
|*  3 |    HASH JOIN                |               |    20 |  1740 |     7  (15)| 00:00:01 |
|*  4 |     VIEW                    |               |    20 |  1060 |     4  (25)| 00:00:01 |
|*  5 |      WINDOW SORT PUSHED RANK|               |    20 |   680 |     4  (25)| 00:00:01 |
|   6 |       TABLE ACCESS FULL     | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
|   7 |     TABLE ACCESS FULL       | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
---------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$3")
      OUTLINE_LEAF(@"SEL$F5BB74E1")
      MERGE(@"SEL$2" >"SEL$1")
      OUTLINE_LEAF(@"SEL$5")
      OUTLINE_LEAF(@"SEL$4")
      OUTLINE_LEAF(@"MRG$1")
      OUTLINE(@"SEL$1")
      OUTLINE(@"SEL$2")
      NO_ACCESS(@"MRG$1" "from$_subquery$_009"@"MRG$1")
      NO_ACCESS(@"MRG$1" "SRC"@"MRG$1")
      FULL(@"MRG$1" "TGT"@"MRG$1")
      LEADING(@"MRG$1" "from$_subquery$_009"@"MRG$1" "SRC"@"MRG$1" "TGT"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "SRC"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "TGT"@"MRG$1")
      NO_ACCESS(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2")
      FULL(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      LEADING(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1")
      USE_HASH(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      NO_ACCESS(@"SEL$4" "from$_subquery$_004"@"SEL$4")
      FULL(@"SEL$5" "PRODUCT_SALES"@"SEL$5")
      FULL(@"SEL$3" "PRODUCT_SALES"@"SEL$3")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   3 - access("TGT".ROWID="from$_subquery$_007"."AROWID")
   4 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0
              )=0))
   5 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  637c3ufvn654k, child number 0
-------------------------------------
MERGE /*+ gather_plan_statistics MH2_DML leading(@"SEL$F5BB74E1"
"from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1") use_nl(@"SEL$F5BB74E1"
"TGT"@"SEL$1") */ INTO product_sales tgt USING (SELECT *        FROM (
        SELECT rowid arowid, product_id, DATE '1900-01-01' sales_date,
               sales_date AS old_sales_date,                 Rank()
OVER (PARTITION BY product_id ORDER BY sales_date) rn          FROM
product_sales        )        WHERE 1=1 AND rn = 1 AND 0 =
Decode(sales_date, old_sales_date, 1, 0)) src ON (tgt.rowid =
src.arowid) WHEN MATCHED THEN   UPDATE SET     tgt.sales_date =
src.sales_date

Plan hash value: 178833565

---------------------------------------------------------------------------------------------------------
| Id  | Operation                     | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |
---------------------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT               |               |      1 |        |      0 |00:00:00.01 |      20 |
|   1 |  MERGE                        | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      20 |
|   2 |   VIEW                        |               |      1 |        |      2 |00:00:00.01 |       8 |
|   3 |    NESTED LOOPS               |               |      1 |     20 |      2 |00:00:00.01 |       8 |
|*  4 |     VIEW                      |               |      1 |     20 |      2 |00:00:00.01 |       7 |
|*  5 |      WINDOW SORT PUSHED RANK  |               |      1 |     20 |      2 |00:00:00.01 |       7 |
|   6 |       TABLE ACCESS FULL       | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |
|   7 |     TABLE ACCESS BY USER ROWID| PRODUCT_SALES |      2 |      1 |      2 |00:00:00.01 |       1 |
---------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0)=0))
   5 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  637c3ufvn654k, child number 0
-------------------------------------
MERGE /*+ gather_plan_statistics MH2_DML leading(@"SEL$F5BB74E1"
"from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1") use_nl(@"SEL$F5BB74E1"
"TGT"@"SEL$1") */ INTO product_sales tgt USING (SELECT *        FROM (
        SELECT rowid arowid, product_id, DATE '1900-01-01' sales_date,
               sales_date AS old_sales_date,                 Rank()
OVER (PARTITION BY product_id ORDER BY sales_date) rn          FROM
product_sales        )        WHERE 1=1 AND rn = 1 AND 0 =
Decode(sales_date, old_sales_date, 1, 0)) src ON (tgt.rowid =
src.arowid) WHEN MATCHED THEN   UPDATE SET     tgt.sales_date =
src.sales_date

Plan hash value: 178833565

-----------------------------------------------------------------------------------------------
| Id  | Operation                     | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | MERGE STATEMENT               |               |       |       |    24 (100)|          |
|   1 |  MERGE                        | PRODUCT_SALES |       |       |            |          |
|   2 |   VIEW                        |               |       |       |            |          |
|   3 |    NESTED LOOPS               |               |    20 |  1740 |    24   (5)| 00:00:01 |
|*  4 |     VIEW                      |               |    20 |  1060 |     4  (25)| 00:00:01 |
|*  5 |      WINDOW SORT PUSHED RANK  |               |    20 |   680 |     4  (25)| 00:00:01 |
|   6 |       TABLE ACCESS FULL       | PRODUCT_SALES |    20 |   680 |     3   (0)| 00:00:01 |
|   7 |     TABLE ACCESS BY USER ROWID| PRODUCT_SALES |     1 |    34 |     1   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$3")
      OUTLINE_LEAF(@"SEL$F5BB74E1")
      MERGE(@"SEL$2" >"SEL$1")
      OUTLINE_LEAF(@"SEL$5")
      OUTLINE_LEAF(@"SEL$4")
      OUTLINE_LEAF(@"MRG$1")
      OUTLINE(@"SEL$1")
      OUTLINE(@"SEL$2")
      NO_ACCESS(@"MRG$1" "from$_subquery$_009"@"MRG$1")
      NO_ACCESS(@"MRG$1" "SRC"@"MRG$1")
      FULL(@"MRG$1" "TGT"@"MRG$1")
      LEADING(@"MRG$1" "from$_subquery$_009"@"MRG$1" "SRC"@"MRG$1" "TGT"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "SRC"@"MRG$1")
      USE_MERGE_CARTESIAN(@"MRG$1" "TGT"@"MRG$1")
      NO_ACCESS(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2")
      ROWID(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      LEADING(@"SEL$F5BB74E1" "from$_subquery$_007"@"SEL$2" "TGT"@"SEL$1")
      USE_NL(@"SEL$F5BB74E1" "TGT"@"SEL$1")
      NO_ACCESS(@"SEL$4" "from$_subquery$_004"@"SEL$4")
      FULL(@"SEL$5" "PRODUCT_SALES"@"SEL$5")
      FULL(@"SEL$3" "PRODUCT_SALES"@"SEL$3")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - filter(("RN"=1 AND DECODE(INTERNAL_FUNCTION("SALES_DATE"),"OLD_SALES_DATE",1,0)=
              0))
   5 - filter(RANK() OVER ( PARTITION BY "PRODUCT_ID" ORDER BY "SALES_DATE")<=1)

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  39c8mc39avt7c, child number 0
-------------------------------------
DELETE /*+ gather_plan_statistics DEL_DML */ product_sales sd  WHERE
1=1 AND (product_id, sales_date) IN (     SELECT product_id,
Min(sales_date)       FROM product_sales      WHERE 1=1      GROUP BY
product_id     HAVING Min(sales_date) != DATE '1900-01-01'     )

Plan hash value: 4229131765

-----------------------------------------------------------------------------------------------------------------------------
| Id  | Operation              | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
-----------------------------------------------------------------------------------------------------------------------------
|   0 | DELETE STATEMENT       |               |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|   1 |  DELETE                | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      26 |       |       |          |
|*  2 |   HASH JOIN SEMI       |               |      1 |      1 |      2 |00:00:00.01 |      14 |  1355K|  1355K| 1483K (0)|
|   3 |    TABLE ACCESS FULL   | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
|   4 |    VIEW                | VW_NSO_1      |      1 |     20 |      2 |00:00:00.01 |       7 |       |       |          |
|*  5 |     FILTER             |               |      1 |        |      2 |00:00:00.01 |       7 |       |       |          |
|   6 |      SORT GROUP BY     |               |      1 |     20 |      2 |00:00:00.01 |       7 | 73728 | 73728 |          |
|   7 |       TABLE ACCESS FULL| PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
-----------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("PRODUCT_ID"="PRODUCT_ID" AND "SALES_DATE"="MIN(SALES_DATE)")
   5 - filter(MIN("SALES_DATE")<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  39c8mc39avt7c, child number 0
-------------------------------------
DELETE /*+ gather_plan_statistics DEL_DML */ product_sales sd  WHERE
1=1 AND (product_id, sales_date) IN (     SELECT product_id,
Min(sales_date)       FROM product_sales      WHERE 1=1      GROUP BY
product_id     HAVING Min(sales_date) != DATE '1900-01-01'     )

Plan hash value: 4229131765

----------------------------------------------------------------------------------------
| Id  | Operation              | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | DELETE STATEMENT       |               |       |       |     7 (100)|          |
|   1 |  DELETE                | PRODUCT_SALES |       |       |            |          |
|*  2 |   HASH JOIN SEMI       |               |     1 |    44 |     7  (15)| 00:00:01 |
|   3 |    TABLE ACCESS FULL   | PRODUCT_SALES |    20 |   440 |     3   (0)| 00:00:01 |
|   4 |    VIEW                | VW_NSO_1      |    20 |   440 |     4  (25)| 00:00:01 |
|*  5 |     FILTER             |               |       |       |            |          |
|   6 |      SORT GROUP BY     |               |    20 |   440 |     4  (25)| 00:00:01 |
|   7 |       TABLE ACCESS FULL| PRODUCT_SALES |    20 |   440 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$7D4DB4AA")
      OUTLINE_LEAF(@"SEL$3BA1AD7C")
      UNNEST(@"SEL$1" UNNEST_SEMIJ_VIEW)
      OUTLINE(@"SEL$1")
      OUTLINE(@"DEL$1")
      FULL(@"SEL$3BA1AD7C" "SD"@"DEL$1")
      NO_ACCESS(@"SEL$3BA1AD7C" "VW_NSO_1"@"SEL$3BA1AD7C")
      LEADING(@"SEL$3BA1AD7C" "SD"@"DEL$1" "VW_NSO_1"@"SEL$3BA1AD7C")
      USE_HASH(@"SEL$3BA1AD7C" "VW_NSO_1"@"SEL$3BA1AD7C")
      FULL(@"SEL$7D4DB4AA" "PRODUCT_SALES"@"SEL$1")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("PRODUCT_ID"="PRODUCT_ID" AND "SALES_DATE"="MIN(SALES_DATE)")
   5 - filter(MIN("SALES_DATE")<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd
              hh24:mi:ss'))

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  faj0v2vmamf60, child number 0
-------------------------------------
INSERT INTO product_sales WITH date_mins AS (     SELECT product_id
  FROM product_sales      GROUP BY product_id     HAVING
Min(sales_date) != DATE '1900-01-01' ) SELECT /*+
gather_plan_statistics INS_DML */ product_id, DATE '1900-01-01'   FROM
date_mins  WHERE 1=1

Plan hash value: 2420629719

-------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                | Name          | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
-------------------------------------------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |               |      1 |        |      0 |00:00:00.01 |      15 |       |       |          |
|   1 |  LOAD TABLE CONVENTIONAL | PRODUCT_SALES |      1 |        |      0 |00:00:00.01 |      15 |       |       |          |
|*  2 |   FILTER                 |               |      1 |        |      2 |00:00:00.01 |       7 |       |       |          |
|   3 |    HASH GROUP BY         |               |      1 |     20 |      2 |00:00:00.01 |       7 |  1558K|  1558K|  619K (0)|
|   4 |     TABLE ACCESS FULL    | PRODUCT_SALES |      1 |     20 |     20 |00:00:00.01 |       7 |       |       |          |
-------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter(MIN("SALES_DATE")<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  faj0v2vmamf60, child number 0
-------------------------------------
INSERT INTO product_sales WITH date_mins AS (     SELECT product_id
  FROM product_sales      GROUP BY product_id     HAVING
Min(sales_date) != DATE '1900-01-01' ) SELECT /*+
gather_plan_statistics INS_DML */ product_id, DATE '1900-01-01'   FROM
date_mins  WHERE 1=1

Plan hash value: 2420629719

------------------------------------------------------------------------------------------
| Id  | Operation                | Name          | Rows  | Bytes | Cost (%CPU)| Time     |
------------------------------------------------------------------------------------------
|   0 | INSERT STATEMENT         |               |       |       |     4 (100)|          |
|   1 |  LOAD TABLE CONVENTIONAL | PRODUCT_SALES |       |       |            |          |
|*  2 |   FILTER                 |               |       |       |            |          |
|   3 |    HASH GROUP BY         |               |    20 |   440 |     4  (25)| 00:00:01 |
|   4 |     TABLE ACCESS FULL    | PRODUCT_SALES |    20 |   440 |     3   (0)| 00:00:01 |
------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$58A6D7F6")
      MERGE(@"SEL$1" >"SEL$2")
      OUTLINE_LEAF(@"INS$1")
      OUTLINE(@"SEL$2")
      OUTLINE(@"SEL$1")
      FULL(@"INS$1" "PRODUCT_SALES"@"INS$1")
      FULL(@"SEL$58A6D7F6" "PRODUCT_SALES"@"SEL$1")
      USE_HASH_AGGREGATION(@"SEL$58A6D7F6")
      END_OUTLINE_DATA
  */

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter(MIN("SALES_DATE")<>TO_DATE(' 1900-01-01 00:00:00', 'syyyy-mm-dd
              hh24:mi:ss'))

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  gn5xfra4gqfqw, child number 0
-------------------------------------
CREATE TABLE product_sales_ctas AS SELECT /*+ gather_plan_statistics
CTAS_DDL */ product_id,        CASE WHEN sales_date = Min(sales_date)
OVER (PARTITION BY product_id) THEN DATE '1900-01-01' ELSE sales_date
END sales_date   FROM product_sales   WHERE 1=1

Plan hash value: 836769672

-----------------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                        | Name               | Starts | E-Rows | A-Rows |   A-Time   | Buffers | Writes |  OMem |  1Mem | Used-Mem |
-----------------------------------------------------------------------------------------------------------------------------------------------------
|   0 | CREATE TABLE STATEMENT           |                    |      1 |        |      0 |00:00:00.01 |      62 |      1 |       |       |          |
|   1 |  LOAD AS SELECT                  | PRODUCT_SALES_CTAS |      1 |        |      0 |00:00:00.01 |      62 |      1 |  1040K|  1040K| 1040K (0)|
|   2 |   OPTIMIZER STATISTICS GATHERING |                    |      1 |     20 |     20 |00:00:00.01 |       7 |      0 |   256K|   256K|  256K (0)|
|   3 |    WINDOW SORT                   |                    |      1 |     20 |     20 |00:00:00.01 |       7 |      0 |  2048 |  2048 | 2048  (0)|
|   4 |     TABLE ACCESS FULL            | PRODUCT_SALES      |      1 |     20 |     20 |00:00:00.01 |       7 |      0 |       |       |          |
-----------------------------------------------------------------------------------------------------------------------------------------------------

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)

SQL_ID  gn5xfra4gqfqw, child number 0
-------------------------------------
CREATE TABLE product_sales_ctas AS SELECT /*+ gather_plan_statistics
CTAS_DDL */ product_id,        CASE WHEN sales_date = Min(sales_date)
OVER (PARTITION BY product_id) THEN DATE '1900-01-01' ELSE sales_date
END sales_date   FROM product_sales   WHERE 1=1

Plan hash value: 836769672

-------------------------------------------------------------------------------------------------------
| Id  | Operation                        | Name               | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------------------
|   0 | CREATE TABLE STATEMENT           |                    |       |       |     5 (100)|          |
|   1 |  LOAD AS SELECT                  | PRODUCT_SALES_CTAS |       |       |            |          |
|   2 |   OPTIMIZER STATISTICS GATHERING |                    |    20 |   440 |     4  (25)| 00:00:01 |
|   3 |    WINDOW SORT                   |                    |    20 |   440 |     4  (25)| 00:00:01 |
|   4 |     TABLE ACCESS FULL            | PRODUCT_SALES      |    20 |   440 |     3   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------------------

Outline Data
-------------

  /*+
      BEGIN_OUTLINE_DATA
      IGNORE_OPTIM_EMBEDDED_HINTS
      OPTIMIZER_FEATURES_ENABLE('12.2.0.1')
      DB_VERSION('12.2.0.1')
      ALL_ROWS
      OUTLINE_LEAF(@"SEL$1")
      FULL(@"SEL$1" "PRODUCT_SALES"@"SEL$1")
      END_OUTLINE_DATA
  */

Note
-----
   - dynamic statistics used: dynamic sampling (level=2)


641 rows selected.

Elapsed: 00:00:00.23
SQL> 
SQL> SPOOL OFF
